initialize_filter:
    '''Initializing the unscented Kalman filter'''
    Initialize process noise covariance matrix Q
    Initialize observation noise covariance matrix R 
    Initialize state X_previous
    Initialize covariance P_previous
    Initialize the total simulation time step length N

    # Simulated generation of real clock changes
    for i in range(N):
        X=fun_f+sqrtm(Q)

    # Generate observation values
    for i in range(N):
        Z=fun_h+sqrtm(R)

    # Call UKF filtering algorithm
    for i in range(N):
        X, P=UnscentedKalmanFilter(X_previous, P_previous, Q, Z, R, fun_f, fun_h, alpha, kappa)
    
function UnscentedKalmanFilter(X_previous, P_previous, Q, Z, R, fun_f, fun_h, alpha, kappa)
    # Generate sigma points
    sigma_points = GenerateSigmaPoints(X_previous, P_previous, alpha, kappa)

    # Predict state and covariance
    X_sigma_pred, X_bar, P_bar = PredictState(sigma_points, fun_f, Q)

    # Predict measurement and covariance
    Z_sigma_pred, Z_bar, Pzz_U, Pzz_S, Pzz_K = PredictMeasurement(sigma_points, fun_h, R)

    # Calculate cross-covariance and Kalman gain
    Pxz = CalculateCrossCovariance(X_sigma_pred, Z_sigma_pred, X_bar, Z_bar, alpha, kappa)
    K = Pxz * (delta * (I-Pzz_U * inv( Pzz_S * delta+ Pzz_K * Pzz_U )* Pzz_K))

    # Update state and covariance
    X, P = UpdateState(X_bar, K, Z, Z_bar)
    P = P - K  * Pzz_U * Pzz_S  * Pzz_K - delta/2  * K  * K.T

return X, P
